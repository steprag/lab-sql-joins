use sakila;
-- List the number of films per category.
select category.name, count(film_category.film_id)
from film_category
inner join category on film_category.category_id = category.category_id
group by category.name;

-- Calculate the total revenue generated by each store in dollars.
select staff.store_id, sum(payment.amount) as total_rev
from staff
inner join payment on staff.staff_id = payment.staff_id
group by staff.store_id;

-- Determine the average running time of films for each category.
select category.name, round(avg(film.length),2) as avg_length
from film_category
inner join category on film_category.category_id = category.category_id
inner join film on film_category.film_id = film.film_id
group by category.name;

-- Bonus:
-- Identify the film categories with the longest average running time.
select category.name as Long_film_cat, round(avg(film.length),2) as avg_length
from film_category
inner join category on film_category.category_id = category.category_id
inner join film on film_category.film_id = film.film_id
group by category.name
order by avg_length desc
limit 5 ;


-- Determine if "Academy Dinosaur" can be rented from Store 1.
select film.title, inventory.store_id,
case when count(inventory.film_id) > 0 then 'Available for rent'
	else 'Not Available for rent'
end as rent_availability
from film
inner join inventory on inventory.film_id = film.film_id
where film.title = 'Academy Dinosaur'
group by film.title, inventory.store_id ;

-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- -  Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- -  Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT distinct film.title,
  CASE WHEN COUNT(inventory.film_id) > 0 THEN 'Available'
    ELSE 'NOT available'
  END AS rent_availability
FROM film
LEFT JOIN inventory ON film.film_id = inventory.film_id
GROUP BY film.title;